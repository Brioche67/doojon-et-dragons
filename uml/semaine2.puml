@startuml
'https://plantuml.com/class-diagram
package "donjonDragon"
{
package "entite"
{
/'Définitions des classes'/
abstract Entite<<abstract>>
{
#m_pvMax : Integer
#m_pv : Integer
#m_force : Integer
#m_dexterite : Integer
#m_vitesse : Integer
#m_initiative : Integer
#m_enVie : Boolean
#m_pos : Integer[*]

+getPvMax():Integer
+getPv():Integer
+getForce():Integer
+getDexterite():Integer
+getVitesse():Integer
+getInitiative():Integer
+getClasseArmure():Integer {abstract}
+getNom():String {abstract}
+setPv(pv:Integer)
+setEnVie(vie:Boolean)
+attaquer(cible:Entite) {abstract}
+seDeplacer(donjon:Donjon,pos:Integer[*])
+toString():String {abstract}

}
class Personnage
{
-m_nom : String
-m_race : Race
-m_classe : Classe
-m_inventaire:Equipement[*]
-m_arme : Arme
-m_armure : Armure

+«Create» Personnage(nom:String,classe:Classe,race:Race,pvMax:Integer,pv:Integer,force:Integer,dexterite:Integer,vitesse:Integer,initiative:Integer): Personnage
+sEquiper(objet:Equipement): Void
+ramasser(): Void
+getNom():String
+getRace():Race
+getClasse():Classe
+getInventaire():Equipement[*]
+getArme():Arme
+getArmure():Armure
+getClasseArmure():Integer
+attaquer(cible:Entite)
+toString():String

}
class Monstre
{
-m_espece : String
-m_numero : Integer
-m_degat : De
-m_portee : Integer
-m_classeArmure : Integer
+«Create» Monstre(espece:String,numero:Integer,degat:De,portee:Integer,pvMax:Integer,force:Integer,dexterite:Integer,vitesse:Integer,initiative:Integer,classeArmure:Integer): Monstre
+getEspece():String
+getNumero():Integer
+getClasseArmure():Integer
+getNom():String
+attaquer(cible:Entite)
+toString():String

}
package "classe"
{
abstract Classe<<abstract>>
{
#m_nom:String
#m_pv:Integer
#m_equipementDepart:Equipement

+getPv():Integer
+toString():String
}
class Clerc
{
+«Create» Clerc(): Clerc
}
class Guerrier
{
+«Create» Guerrier(): Guerrier
}
class Magicien
{
+«Create» Magicien(): Magicien
}
class Roublard
{
+«Create» Roublard(): Roublard
}
}

package "race"
{
/'Définitions des classes'/
abstract Race<<abstract>>
{
#m_pv : Integer
#m_force : Integer
#m_dexterite : Integer
#m_vitesse : Integer
#m_initiative : Integer
+getPv():Integer
+getForce():Integer
+getDexterite():Integer
+getVitesse():Integer
+getInitiative():Integer
+toString():String
}
class Elfe
{
+«Create» Elfe(): Elfe
}
class Humain
{
+«Create» Humain(): Humain
}
class Halfelin
{
+«Create» Halfelin(): Halfelin
}
class Nain
{
+«Create» Nain(): Nain
}
}

/'Définitions des relations'/
Personnage -up-|> Entite
Monstre -up-|> Entite

Clerc -up-|> Classe
Guerrier -up-|> Classe
Magicien -up-|> Classe
Roublard -up-|> Classe

Elfe -up-|> Race
Humain -up-|> Race
Halfelin -up-|> Race
Nain -up-|> Race

}
package "equipement"
{
/'Définitions des classes'/
abstract Equipement<<abstract>>
{
#m_nom:String
#m_lourd:Boolean
#m_pos:Integer[*]

+getNom():String
+getLourd():Boolean
+setPos(pos:Integer[*])
+positionnerEquipement(donjon:Donjon,pos:Integer[*])
+toString():String
}
class Armure
{
-m_classeArmure:Integer
+«Create» Armure(nom:Integer,classeArmure,est_lourd:Boolean): Armure
+getClasse():Integer
}
class Arme
{
-m_degat:De
-m_portee:Integer
+«Create» Armure(nom:String,portee:Integer,est_lourd:Boolean): Armure
+getDegat():De
+getPortee():Integer
}
/'Définitions des relations'/
Armure -up-|> Equipement
Arme -up-|> Equipement
}
package "plateau"
{
/'Définitions des classes'/
class Donjon
{
-m_taille:Integer
-m_carte:String[*][*]
-m_monstres:Donjon[*]
+«Create» Donjon(): Donjon
+«Create» Donjon(taille:Integer): Donjon
+creerCarte():Integer
+initialiserCarte():String[*][*]
+cordonneX(lettreX:char):Integer
+cordonneValide(coordX:Integer,coordY:Integer):Booleans
+getValeurEmplacement(pos:Integer[*]):Integer
+placerObstacle()
+placerEntite(entite:Entite)
+placerEquipement(objet:Equipement)
+donjonDefaut(persos:ArrayList<Personnage>,objets:ArrayList<Equipement>,monstres:ArrayList<Monstre>)
+afficherCarte()
+getCarte():String[*][*]
+getMonstres():ArrayList<Monstre>
+addMonstres()
}
/'Définitions des relations'/
'--- Relations d'appel ---
Donjon .> Entite : "«call»"
Donjon .> Equipement : "«call»"
Donjon .> Monstre : "«call»"
Donjon .> Personnage : "«call»"

'--- Agrégations ---
Donjon "1" o--> "0..*\n-m_monstres" Monstre : contient
}
class De
{
-m_nombre:Integer
-m_face:Integer
+«Create» De(nombre:Integer,face:Integer): De
+lancer():Integer
+toString():String
}
class Jeu
{
-m_donjons : Donjon[*]
-m_donjonActuel : int
-m_joueurs : Personnage[*]
-m_scanner :

+«Create» Jeu(joueurs : Personnage[*]) : Jeu
+lancerPartie() : void
+proposerMiseEnPlace(donjon : Donjon) : void
+calculerInitiative(donjon : Donjon) : Entite[*]
+gererTourPersonnage(joueur : Personnage, donjon : Donjon) : void
+gererTourMonstre(monstre : Monstre, donjon : Donjon) : void
+donjonEstTermine(donjon : Donjon) : boolean
+restaurerVieJoueurs() : void
+auMoinsUnJoueurMort() : boolean
+afficherDefaite() : void
+afficherVictoire() : void
}
/'Définitions des relations'/
' --- Relations d'appel ---
Jeu .> Donjon : "«call»"
Jeu .> Personnage : "«call»"
Jeu .> Monstre : "«call»"
Jeu .> Entite : "«call»"
Jeu .> Armure : "«call»"
Jeu .> Arme : "«call»"
Jeu .> Scanner : "«call»"
Jeu .> De : "«call»"

' --- Relations d'instanciation ---
Jeu .> Donjon : "«instantiate»"
Jeu .> Armure : "«instantiate»"
Jeu .> Arme : "«instantiate»"
Jeu .> Monstre : "«instantiate»"
Jeu .> De : "«instantiate»"
Jeu .> Scanner : "«instantiate»"

' --- Agrégations ---
Jeu "1" *--> "3\n-m_donjons" Donjon : contient
Jeu "1" o--> "1..*\n-m_joueurs" Personnage : se joue avec
}

@enduml
